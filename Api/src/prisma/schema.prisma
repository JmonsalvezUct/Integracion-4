generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  name           String
  email          String          @unique
  password       String
  profilePicture String?
  history        ChangeHistory[]
  notifications  Notification[]
  assignedTasks  Task[]          @relation("AssignedTasks")
  createdTasks   Task[]          @relation("CreatedTasks")
  projects       UserProject[]
}

model Project {
  id          Int             @id @default(autoincrement())
  name        String
  description String?
  history     ChangeHistory[]
  tasks       Task[]
  users       UserProject[]
}

model UserProject {
  id        Int         @id @default(autoincrement())
  userId    Int
  projectId Int
  roleId    Int
  project   Project     @relation(fields: [projectId], references: [id])
  role      ProjectRole @relation(fields: [roleId], references: [id])
  user      User        @relation(fields: [userId], references: [id])

  @@unique([userId, projectId])
  @@index([projectId])
  @@index([userId])
}

model ProjectRole {
  id      Int           @id @default(autoincrement())
  role    String        @unique
  members UserProject[]
}

model Task {
  id          Int             @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime        @default(now())
  dueDate     DateTime?
  creatorId   Int
  assigneeId  Int?
  projectId   Int
  statusId    Int
  priorityId  Int
  attachments Attachment[]
  history     ChangeHistory[]
  assignee    User?           @relation("AssignedTasks", fields: [assigneeId], references: [id])
  creator     User            @relation("CreatedTasks", fields: [creatorId], references: [id])
  priority    Priority        @relation(fields: [priorityId], references: [id])
  project     Project         @relation(fields: [projectId], references: [id])
  status      Status          @relation(fields: [statusId], references: [id])
}

model Status {
  id     Int    @id @default(autoincrement())
  status String @unique
  tasks  Task[]
}

model Priority {
  id       Int    @id @default(autoincrement())
  priority String @unique
  tasks    Task[]
}

model Attachment {
  id             Int            @id @default(autoincrement())
  url            String
  taskId         Int
  typeId         Int
  task           Task           @relation(fields: [taskId], references: [id])
  AttachmentType AttachmentType @relation(fields: [typeId], references: [id])
}

model Notification {
  id      Int              @id @default(autoincrement())
  message String
  read    Boolean          @default(false)
  userId  Int
  typeId  Int
  type    NotificationType @relation(fields: [typeId], references: [id])
  user    User             @relation(fields: [userId], references: [id])
}

model NotificationType {
  id            Int            @id @default(autoincrement())
  type          String         @unique
  notifications Notification[]
}

model ChangeHistory {
  id          Int      @id @default(autoincrement())
  date        DateTime @default(now())
  description String
  userId      Int
  taskId      Int?
  projectId   Int?
  actionId    Int
  action      Action   @relation(fields: [actionId], references: [id])
  project     Project? @relation(fields: [projectId], references: [id])
  task        Task?    @relation(fields: [taskId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model Action {
  id      Int             @id @default(autoincrement())
  action  String          @unique
  history ChangeHistory[]
}

model AttachmentType {
  id         Int          @id @default(autoincrement())
  type       String       @unique
  Attachment Attachment[]
}
