generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int             @id @default(autoincrement())
  name              String
  email             String          @unique
  password          String
  profilePicture    String?
  resetToken        String?         @db.VarChar(255)
  resetTokenExpires DateTime?
  createdAt         DateTime        @default(now())
  history           ChangeHistory[]
  notifications     Notification[]
  refreshTokens     RefreshToken[]
  assignedTasks     Task[]          @relation("AssignedTasks")
  createdTasks      Task[]          @relation("CreatedTasks")
  projects          UserProject[]
}

model Project {
  id          Int             @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime        @default(now())
  endDate     DateTime?
  startDate   DateTime?
  status      String          @default("active")
  history     ChangeHistory[]
  tasks       Task[]
  users       UserProject[]
}

model UserProject {
  id        Int             @id @default(autoincrement())
  userId    Int
  projectId Int
  role      ProjectRoleType @default(developer)
  project   Project         @relation(fields: [projectId], references: [id])
  user      User            @relation(fields: [userId], references: [id])
}

model Task {
  id          Int             @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime        @default(now())
  dueDate     DateTime?
  creatorId   Int
  assigneeId  Int?
  projectId   Int
  attachments Attachment[]
  history     ChangeHistory[]
  assignee    User?           @relation("AssignedTasks", fields: [assigneeId], references: [id])
  creator     User            @relation("CreatedTasks", fields: [creatorId], references: [id])
  project     Project         @relation(fields: [projectId], references: [id])
  status      StatusType   @default(created)
  priority    PriorityType @default(medium)
  tags TaskTag[] 
}

model Attachment {
  id           Int      @id @default(autoincrement())
  taskId       Int
  createdAt    DateTime @default(now())
  filename     String
  mimetype     String
  originalName String
  path         String
  size         Int
  task         Task     @relation(fields: [taskId], references: [id])
}

model Notification {
  id        Int              @id @default(autoincrement())
  message   String
  read      Boolean          @default(false)
  userId    Int
  typeId    Int
  createdAt DateTime         @default(now())
  type      NotificationType @relation(fields: [typeId], references: [id])
  user      User             @relation(fields: [userId], references: [id])
}

model NotificationType {
  id            Int            @id @default(autoincrement())
  type          String         @unique
  notifications Notification[]
}

model ChangeHistory {
  id          Int      @id @default(autoincrement())
  date        DateTime @default(now())
  description String
  userId      Int
  taskId      Int?
  projectId   Int?
  action      ActionType 
  createdAt   DateTime @default(now())
  project     Project? @relation(fields: [projectId], references: [id])
  task        Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id])
}



enum ActionType {
  CREATED
  UPDATED
  DELETED
  ASSIGNED
  STATUS_CHANGED
  PRIORITY_CHANGED
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  userAgent String?
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

enum ProjectRoleType {
  admin
  developer
  guest
}

enum PriorityType {
  high
  medium
  low
}

enum StatusType {
  created
  in_progress
  completed
  archived
}



model Tag {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  color String? // opcional, por si quieres mostrar un color asociado al tag

  tasks TaskTag[]
}


model TaskTag {
  id     Int   @id @default(autoincrement())
  taskId Int
  tagId  Int

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([taskId, tagId]) // evita duplicar la misma etiqueta en una tarea
}

