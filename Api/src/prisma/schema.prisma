// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  name            String
  email           String           @unique
  password        String
  profilePicture  String?
  projects        UserProject[]
  createdTasks    Task[]           @relation("CreatedTasks")
  assignedTasks   Task[]           @relation("AssignedTasks")
  notifications   Notification[]
  history         ChangeHistory[]

  refreshTokens RefreshToken[]
  createdAt    DateTime     @default(now())
}

model Project {
  id          Int              @id @default(autoincrement())
  name        String
  description String?
  users       UserProject[]
  tasks       Task[]
  history     ChangeHistory[]
  createdAt    DateTime     @default(now())
}

model UserProject {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int
  project   Project    @relation(fields: [projectId], references: [id])
  projectId Int
  role      ProjectRole @relation(fields: [roleId], references: [id])
  roleId    Int
}

model ProjectRole {
  id       Int          @id @default(autoincrement())
  role     String
  members  UserProject[]
}

model Task {
  id           Int          @id @default(autoincrement())
  title        String
  description  String?
  createdAt    DateTime     @default(now())
  dueDate      DateTime?
  creator      User         @relation("CreatedTasks", fields: [creatorId], references: [id])
  creatorId    Int
  assignee     User?        @relation("AssignedTasks", fields: [assigneeId], references: [id])
  assigneeId   Int?
  project      Project      @relation(fields: [projectId], references: [id])
  projectId    Int
  status       Status       @relation(fields: [statusId], references: [id])
  statusId     Int
  priority     Priority     @relation(fields: [priorityId], references: [id])
  priorityId   Int
  attachments  Attachment[]
  history      ChangeHistory[]
}

model Status {
  id     Int     @id @default(autoincrement())
  status   String  @unique
  tasks  Task[]
}

model Priority {
  id     Int     @id @default(autoincrement())
  priority   String  @unique
  tasks  Task[]
}

model Attachment {
  id       Int          @id @default(autoincrement())
  url      String
  task     Task         @relation(fields: [taskId], references: [id])
  taskId   Int
  type     AttachmentType @relation(fields: [typeId], references: [id])
  typeId   Int
}

model AttachmentType {
  id         Int         @id @default(autoincrement())
  type       String      @unique
  attachments Attachment[]
}

model Notification {
  id        Int                @id @default(autoincrement())
  message   String
  read      Boolean            @default(false)
  user      User               @relation(fields: [userId], references: [id])
  userId    Int
  type      NotificationType   @relation(fields: [typeId], references: [id])
  typeId    Int
  createdAt    DateTime     @default(now())
}

model NotificationType {
  id             Int             @id @default(autoincrement())
  type           String          @unique
  notifications  Notification[]
}

model ChangeHistory {
  id          Int       @id @default(autoincrement())
  date        DateTime  @default(now())
  description String
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  task        Task?     @relation(fields: [taskId], references: [id])
  taskId      Int?
  project     Project?  @relation(fields: [projectId], references: [id])
  projectId   Int?
  action      Action    @relation(fields: [actionId], references: [id])
  actionId    Int
  createdAt    DateTime     @default(now())
}

model Action {
  id       Int               @id @default(autoincrement())
  action     String            @unique
  history  ChangeHistory[]
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  userId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userAgent  String?
  createdAt  DateTime @default(now())
  expiresAt  DateTime

  @@index([userId])
  @@index([expiresAt])
}